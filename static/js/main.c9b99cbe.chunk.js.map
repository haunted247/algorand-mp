{"version":3,"sources":["utils/conversions.js","utils/marketplace.js","contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","utils/constants.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/marketplace/Products.jsx","assets/img/sandwich.jpg","App.js","reportWebVitals.js","index.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","global","require","Product","constructor","name","image","description","price","sold","appId","owner","this","compileProgram","async","programBytes","TextEncoder","encode","programSource","compileResponse","algodClient","compile","do","Uint8Array","result","createProductAction","senderAddress","product","_product$image","console","log","Error","params","getTransactionParams","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","compiledApprovalProgram","approvalProgram","compiledClearProgram","clearProgram","note","marketplaceNote","appArgs","encodeUint64","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signedTxn","myAlgoConnect","signTransaction","toByte","sendRawTransaction","blob","confirmedTxn","waitForConfirmation","pendingTransactionInformation","buyProductAction","count","txnArray","makeApplicationCallTxnFromObject","appIndex","makePaymentTxnWithSuggestedParamsFromObject","to","amount","groupID","computeGroupID","i","group","map","tx","deleteProductAction","index","makeApplicationDeleteTxnFromObject","apid","getProductsAction","encodedNote","transactionInfo","indexerClient","searchForTransactions","notePrefix","txType","minRound","products","transaction","transactions","getApplication","push","response","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","value","bytes","uint","err","config","Algodv2","Indexer","MyAlgoConnect","timeout","Cover","_ref","coverImg","connect","_jsxs","className","children","_jsx","style","maxWidth","src","alt","Button","onClick","variant","Identicon","propTypes","size","PropTypes","number","isRequired","string","AddressIdenticon","rest","width","concat","height","Wallet","symbol","disconnect","_Fragment","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProduct","createProduct","setName","useState","setImage","setDescription","setPrice","isFormFilled","useCallback","show","setShow","handleClose","handleShow","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","placeholder","Footer","disabled","buyProduct","deleteProduct","setCount","Col","Card","Badge","bg","objectFit","Text","min","max","Number","Loader","role","Notification","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","_ref2","DefaultProps","defaultProps","Products","fetchBalance","setProducts","loading","setLoading","getProducts","useEffect","toast","error","data","message","Row","xs","sm","lg","App","setAddress","balance","setBalance","lookupAccountByID","accountAddress","then","_balance","account","catch","Container","fluid","Nav","accounts","_account","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9b99cbe.chunk.js","sourcesContent":["import {ALGORAND_DECIMALS} from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}","import algosdk from \"algosdk\";\nimport {\n    algodClient,\n    indexerClient,\n    marketplaceNote,\n    minRound,\n    myAlgoConnect,\n    numGlobalBytes,\n    numGlobalInts,\n    numLocalBytes,\n    numLocalInts\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\nimport {base64ToUTF8String, utf8ToBase64String} from \"./conversions\";\nglobal.Buffer = global.Buffer || require('buffer').Buffer\n\nclass Product {\n    constructor(name, image, description, price, sold, appId, owner) {\n        this.name = name;\n        this.image = image;\n        this.description = description;\n        this.price = price;\n        this.sold = sold;\n        this.appId = appId;\n        this.owner = owner;\n    }\n}\n\nconst compileProgram = async (programSource) => {\n    let encoder = new TextEncoder();\n    let programBytes = encoder.encode(programSource);\n    let compileResponse = await algodClient.compile(programBytes).do();\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n}\n\n// CREATE PRODUCT: ApplicationCreateTxn\nexport const createProductAction = async (senderAddress, product) => {\n    console.log(\"Adding product...\")\n\n    if(product.image?.length > 30) {\n        throw new Error(\"Image text is too long. Try a shorter url\")\n    }\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Compile programs\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\n    const compiledClearProgram = await compileProgram(clearProgram)\n\n    // Build note to identify transaction later and required app args as Uint8Arrays\n    let note = new TextEncoder().encode(marketplaceNote);\n    let name = new TextEncoder().encode(product.name);\n    let image = new TextEncoder().encode(product.image);\n    let description = new TextEncoder().encode(product.description);\n    let price = algosdk.encodeUint64(product.price);\n\n    let appArgs = [name, image, description, price]\n\n    // Create ApplicationCreateTxn\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\n        from: senderAddress,\n        suggestedParams: params,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        approvalProgram: compiledApprovalProgram,\n        clearProgram: compiledClearProgram,\n        numLocalInts: numLocalInts,\n        numLocalByteSlices: numLocalBytes,\n        numGlobalInts: numGlobalInts,\n        numGlobalByteSlices: numGlobalBytes,\n        note: note,\n        appArgs: appArgs\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get created application id and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['application-index'];\n    console.log(\"Created new app-id: \", appId);\n    return appId;\n}\n\nexport const buyProductAction = async (senderAddress, product, count) => {\n    console.log(\"Buying product...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Build required app args as Uint8Array\n    let buyArg = new TextEncoder().encode(\"buy\")\n    let countArg = algosdk.encodeUint64(count);\n    let appArgs = [buyArg, countArg]\n\n    // Create ApplicationCallTxn\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: senderAddress,\n        appIndex: product.appId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n        appArgs: appArgs\n    })\n\n    // Create PaymentTxn\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: senderAddress,\n        to: product.owner,\n        amount: product.price * count,\n        suggestedParams: params\n    })\n\n    let txnArray = [appCallTxn, paymentTxn]\n\n    // Create group transaction out of previously build transactions\n    let groupID = algosdk.computeGroupID(txnArray)\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n    // Sign & submit the group transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n    console.log(\"Signed group transaction\");\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\n\n    // Wait for group transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n    // Notify about completion\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n}\n\nexport const deleteProductAction = async (senderAddress, index) => {\n    console.log(\"Deleting application...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Create ApplicationDeleteTxn\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\n        from: senderAddress, suggestedParams: params, appIndex: index,\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get application id of deleted application and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['txn']['txn'].apid;\n    console.log(\"Deleted app-id: \", appId);\n}\n\nexport const getProductsAction = async () => {\n    console.log(\"Fetching products...\")\n    let note = new TextEncoder().encode(marketplaceNote);\n    let encodedNote = Buffer.from(note).toString(\"base64\");\n\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n    let transactionInfo = await indexerClient.searchForTransactions()\n        .notePrefix(encodedNote)\n        .txType(\"appl\")\n        .minRound(minRound)\n        .do();\n    let products = []\n    for (const transaction of transactionInfo.transactions) {\n        let appId = transaction[\"created-application-index\"]\n        if (appId) {\n            // Step 2: Get each application by application id\n            let product = await getApplication(appId)\n            if (product) {\n                products.push(product)\n            }\n        }\n    }\n    console.log(\"Products fetched.\")\n    return products\n}\n\nconst getApplication = async (appId) => {\n    try {\n        // 1. Get application by appId\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\n        if (response.application.deleted) {\n            return null;\n        }\n        let globalState = response.application.params[\"global-state\"]\n\n        // 2. Parse fields of response and return product\n        let owner = response.application.params.creator\n        let name = \"\"\n        let image = \"\"\n        let description = \"\"\n        let price = 0\n        let sold = 0\n\n        const getField = (fieldName, globalState) => {\n            return globalState.find(state => {\n                return state.key === utf8ToBase64String(fieldName);\n            })\n        }\n\n        if (getField(\"NAME\", globalState) !== undefined) {\n            let field = getField(\"NAME\", globalState).value.bytes\n            name = base64ToUTF8String(field)\n        }\n\n        if (getField(\"IMAGE\", globalState) !== undefined) {\n            let field = getField(\"IMAGE\", globalState).value.bytes\n            image = base64ToUTF8String(field)\n        }\n\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\n            description = base64ToUTF8String(field)\n        }\n\n        if (getField(\"PRICE\", globalState) !== undefined) {\n            price = getField(\"PRICE\", globalState).value.uint\n        }\n\n        if (getField(\"SOLD\", globalState) !== undefined) {\n            sold = getField(\"SOLD\", globalState).value.uint\n        }\n\n        return new Product(name, image, description, price, sold, appId, owner)\n    } catch (err) {\n        return null;\n    }\n}","export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l8\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l7\\ntxna ApplicationArgs 0\\nbyte \\\"buy\\\"\\n==\\nbnz main_l4\\nerr\\nmain_l4:\\nglobal GroupSize\\nint 2\\n==\\ngtxn 1 TypeEnum\\nint pay\\n==\\ngtxn 1 Receiver\\nglobal CreatorAddress\\n==\\n&&\\ngtxn 1 Amount\\nbyte \\\"PRICE\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n*\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\n&&\\nbnz main_l6\\nint 0\\nreturn\\nmain_l6:\\nbyte \\\"SOLD\\\"\\nbyte \\\"SOLD\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l7:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l8:\\ntxn NumAppArgs\\nint 4\\n==\\nassert\\ntxn Note\\nbyte \\\"tutorial-marketplace:uv1\\\"\\n==\\nassert\\ntxna ApplicationArgs 3\\nbtoi\\nint 0\\n>\\nassert\\nbyte \\\"NAME\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"DESCRIPTION\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"PRICE\\\"\\ntxna ApplicationArgs 3\\nbtoi\\napp_global_put\\nbyte \\\"SOLD\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n    algodToken: \"\",\n    algodServer: \"https://testnet-api.algonode.network\",\n    algodPort: \"\",\n    indexerToken: \"\",\n    indexerServer: \"https://testnet-idx.algonode.network\",\n    indexerPort: \"\",\n}\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\n\nexport const myAlgoConnect = new MyAlgoConnect({\n    timeout: 100000000,\n});\n\nexport const minRound = 29556983;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const marketplaceNote = \"tutorial-marketplace:uv1\"\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 2; // Global variables stored as Int: count, sold\nexport const numGlobalBytes = 3; // Global variables stored as Bytes: name, description, image\nexport const ALGORAND_DECIMALS = 6;","import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({name, coverImg, connect}) => {\n    return (\n        <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n            <div className=\"mt-auto text-light mb-5\">\n                <div\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n                    style={{maxWidth: \"320px\"}}\n                >\n                    <img src={coverImg} alt=\"\"/>\n                </div>\n                <h1>{name}</h1>\n                <p>Please connect your wallet to continue.</p>\n                <Button\n                    onClick={() => connect()}\n                    variant=\"outline-light\"\n                    className=\"rounded-pill px-3 mt-3\"\n                >\n                    Connect Wallet\n                </Button>\n            </div>\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n        </div>\n    );\n};\n\nCover.propTypes = {\n    name: PropTypes.string,\n    coverImg: PropTypes.string,\n    connect: PropTypes.func\n};\n\nexport default Cover;","import Identicon from 'react-identicons';\nimport PropTypes from \"prop-types\";\n\nconst AddressIdenticon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Identicon string={address} size={30}  />\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default AddressIdenticon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;","import React, {useCallback, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Button, FloatingLabel, Form, Modal} from \"react-bootstrap\";\nimport {stringToMicroAlgos} from \"../../utils/conversions\";\n\nconst AddProduct = ({createProduct}) => {\n    const [name, setName] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(0);\n\n    const isFormFilled = useCallback(() => {\n        return name && image && description && price > 0\n    }, [name, image, description, price]);\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button\n                onClick={handleShow}\n                variant=\"dark\"\n                className=\"rounded-pill px-0\"\n                style={{width: \"38px\"}}\n            >\n                <i className=\"bi bi-plus\"></i>\n            </Button>\n            <Modal show={show} onHide={handleClose} centered>\n                <Modal.Header closeButton>\n                    <Modal.Title>New Product</Modal.Title>\n                </Modal.Header>\n                <Form>\n                    <Modal.Body>\n                        <FloatingLabel\n                            controlId=\"inputName\"\n                            label=\"Product name\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                onChange={(e) => {\n                                    setName(e.target.value);\n                                }}\n                                placeholder=\"Enter name of product\"\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputUrl\"\n                            label=\"Image URL\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Image URL\"\n                                value={image}\n                                onChange={(e) => {\n                                    setImage(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputDescription\"\n                            label=\"Description\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"description\"\n                                style={{ height: \"80px\" }}\n                                onChange={(e) => {\n                                    setDescription(e.target.value);\n                                }}\n                            />\n                        </FloatingLabel>\n                        <FloatingLabel\n                            controlId=\"inputPrice\"\n                            label=\"Price in ALGO\"\n                            className=\"mb-3\"\n                        >\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Price\"\n                                onChange={(e) => {\n                                    setPrice(stringToMicroAlgos(e.target.value));\n                                }}\n                            />\n                        </FloatingLabel>\n                    </Modal.Body>\n                </Form>\n                <Modal.Footer>\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button\n                        variant=\"dark\"\n                        disabled={!isFormFilled()}\n                        onClick={() => {\n                            createProduct({\n                                name,\n                                image,\n                                description,\n                                price\n                            });\n                            handleClose();\n                        }}\n                    >\n                        Save product\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n\nAddProduct.propTypes = {\n    createProduct: PropTypes.func.isRequired,\n};\n\nexport default AddProduct;","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\nimport {microAlgosToString, truncateAddress} from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\n\nconst Product = ({address, product, buyProduct, deleteProduct}) => {\n    const {name, image, description, price, sold, appId, owner} =\n        product;\n\n    const [count, setCount] = useState(1)\n\n    return (\n        <Col key={appId}>\n            <Card className=\"h-100\">\n                <Card.Header>\n                    <Stack direction=\"horizontal\" gap={2}>\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\n                        <Identicon size={28} address={owner}/>\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\n                            {sold} Sold\n                        </Badge>\n                    </Stack>\n                </Card.Header>\n                <div className=\"ratio ratio-4x3\">\n                    <img src={image} alt={name} style={{objectFit: \"cover\"}}/>\n                </div>\n                <Card.Body className=\"d-flex flex-column text-center\">\n                    <Card.Title>{name}</Card.Title>\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n                    <Form className=\"d-flex align-content-stretch flex-row gap-2\">\n                        <FloatingLabel\n                            controlId=\"inputCount\"\n                            label=\"Count\"\n                            className=\"w-25\"\n                        >\n                            <Form.Control\n                                type=\"number\"\n                                value={count}\n                                min=\"1\"\n                                max=\"10\"\n                                onChange={(e) => {\n                                    setCount(Number(e.target.value));\n                                }}\n                            />\n                        </FloatingLabel>\n                        <Button\n                            variant=\"outline-dark\"\n                            onClick={() => buyProduct(product, count)}\n                            className=\"w-75 py-3\"\n                        >\n                            Buy for {microAlgosToString(price) * count} ALGO\n                        </Button>\n                        {product.owner === address &&\n                            <Button\n                                variant=\"outline-danger\"\n                                onClick={() => deleteProduct(product)}\n                                className=\"btn\"\n                            >\n                                <i className=\"bi bi-trash\"></i>\n                            </Button>\n                        }\n                    </Form>\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n};\n\nProduct.propTypes = {\n    address: PropTypes.string.isRequired,\n    product: PropTypes.instanceOf(Object).isRequired,\n    buyProduct: PropTypes.func.isRequired,\n    deleteProduct: PropTypes.func.isRequired\n};\n\nexport default Product;","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n    <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n    />\n);\n\nconst NotificationSuccess = ({text}) => (\n    <div>\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst NotificationError = ({text}) => (\n    <div>\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst Props = {\n    text: PropTypes.string,\n};\n\nconst DefaultProps = {\n    text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport {Notification, NotificationSuccess, NotificationError};","import React, {useEffect, useState} from \"react\";\nimport {toast} from \"react-toastify\";\nimport AddProduct from \"./AddProduct\";\nimport Product from \"./Product\";\nimport Loader from \"../utils/Loader\";\nimport {NotificationError, NotificationSuccess} from \"../utils/Notifications\";\nimport {buyProductAction, createProductAction, deleteProductAction, getProductsAction,} from \"../../utils/marketplace\";\nimport PropTypes from \"prop-types\";\nimport {Row} from \"react-bootstrap\";\n\nconst Products = ({address, fetchBalance}) => {\n    const [products, setProducts] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const getProducts = async () => {\n      try {\n        setLoading(true);\n        const products = await getProductsAction()\n        if (!products) {\n          return\n        }\n  \n        setProducts(products);\n      } catch (e) {\n        console.log({e})\n      } finally {\n        setLoading(false);\n      }\n    };\n\n\n  useEffect(() => {\n        getProducts();\n    }, []);\n\n    const createProduct = async (data) => {\n        try {\n          setLoading(true);\n          await createProductAction(address, data);\n          toast(<NotificationSuccess text=\"Product added successfully.\"/>);\n          await getProducts();\n          await fetchBalance(address);\n        } catch (error) {\n          console.log(error);\n          toast(<NotificationError text={error?.message || \"Failed to create a product.\"}/>);\n        }finally {\n          setLoading(false);\n        }\n      };\n\n      const buyProduct = async (product, count) => {\n        try {\n          setLoading(true);\n          await buyProductAction(address, product, count);\n          toast(<NotificationSuccess text=\"Product bought successfully\"/>);\n          getProducts();\n          fetchBalance(address);\n        } catch (error) {\n          console.log(error)\n          toast(<NotificationError text=\"Failed to purchase product.\"/>);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      const deleteProduct = async (product) => {\n        try {\n          setLoading(true);\n          await deleteProductAction(address, product.appId);\n          toast(<NotificationSuccess text=\"Product deleted successfully\"/>);\n          getProducts();\n          fetchBalance(address);\n        } catch (error) {\n          console.log(error)\n          toast(<NotificationError text=\"Failed to delete product.\"/>);\n        } finally {\n          setLoading(false);\n        }\n    };\n\n    if (loading) {\n\t    return <Loader/>;\n\t}\n\treturn (\n\t    <>\n\t        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n\t            <h1 className=\"fs-4 fw-bold mb-0\">Street Food</h1>\n\t            <AddProduct createProduct={createProduct}/>\n\t        </div>\n\t        <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n\t            <>\n\t                {products.map((product, index) => (\n\t                    <Product\n\t                        address={address}\n\t                        product={product}\n\t                        buyProduct={buyProduct}\n\t                        deleteProduct={deleteProduct}\n\t                        key={index}\n\t                    />\n\t                ))}\n\t            </>\n\t        </Row>\n\t    </>\n\t);\n};\n\nProducts.propTypes = {\n    address: PropTypes.string.isRequired,\n    fetchBalance: PropTypes.func.isRequired\n};\n\nexport default Products;","export default __webpack_public_path__ + \"static/media/sandwich.2d312449.jpg\";","import React, {useState} from \"react\";\nimport Cover from \"./components/Cover\";\nimport './App.css';\nimport Wallet from \"./components/Wallet\";\nimport {Container, Nav} from \"react-bootstrap\";\nimport Products from \"./components/marketplace/Products\";\nimport {Notification} from \"./components/utils/Notifications\";\nimport {indexerClient, myAlgoConnect} from \"./utils/constants\";\nimport coverImg from \"./assets/img/sandwich.jpg\"\n\nconst App = function AppWrapper() {\n\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n      indexerClient.lookupAccountByID(accountAddress).do()\n          .then(response => {\n              const _balance = response.account.amount;\n              setBalance(_balance);\n          })\n          .catch(error => {\n              console.log(error);\n          });\n  };\n\n  const connectWallet = async () => {\n      myAlgoConnect.connect()\n          .then(accounts => {\n              const _account = accounts[0];\n              setAddress(_account.address);\n              setName(_account.name);\n              fetchBalance(_account.address);\n          }).catch(error => {\n          console.log('Could not connect to MyAlgo wallet');\n          console.error(error);\n      })\n  };\n\n  const disconnect = () => {\n      setAddress(null);\n      setName(null);\n      setBalance(null);\n  };\n  return (\n    <>\n        <Notification />\n        {address ? (\n            <Container fluid=\"md\">\n                <Nav className=\"justify-content-end pt-3 pb-5\">\n                    <Nav.Item>\n                        <Wallet\n                            address={address}\n                            name={name}\n                            amount={balance}\n                            disconnect={disconnect}\n                            symbol={\"ALGO\"}\n                        />\n                    </Nav.Item>\n                </Nav>\n                <main>\n                    <Products address={address} fetchBalance={fetchBalance}/>\n                </main>\n            </Container>\n        ) : (\n            <Cover name={\"Street Food\"} coverImg={coverImg} connect={connectWallet}/>\n        )}\n    </>\n);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}